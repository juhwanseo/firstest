uint8_t* debounce (void)
{
	static uint8_t Old[4] = {0xF, 0xF, 0xF, 0xF};
	static uint8_t Cnt[4];
	
	for(uint8_t i=0; i<4; i++)
	{
		PA->OUTDR = (0xF^(1<<i)); //scan sequence
		if(Old[i] != ((PF->INDR)&0xF))
		{
			Cnt[i]++;
			if(Cnt[i] > 5) 
			{
				Cnt[i] = 0;
				Old[i] = ((PF->INDR)&0xF); //get key value
			}
		}
		else
		{
			Cnt[i] = 0;
		}
	}
	return Old;
}

void KeyStatus (void) //POLLING FUNCTIONG
{
	static uint8_t keyid[4];	
	uint8_t *key = debounce();
	
	for(uint8_t i=0; i<4; i++) //upCnt i scope : 0 1 2 3
	{
		if(key[i] != 0xF){
			switch(key[i]){
				case 0xE : PostMessage(CTRL_TASK, WM_KEYDOWN, 0+(i*4), 0); break; //wParam is VK num [0~15]
				case 0xD : PostMessage(CTRL_TASK, WM_KEYDOWN, 1+(i*4), 0); break;
				case 0xB : PostMessage(CTRL_TASK, WM_KEYDOWN, 2+(i*4), 0); break;
				case 0x7 : PostMessage(CTRL_TASK, WM_KEYDOWN, 3+(i*4), 0); break;
				default : break;	
			}
			keyid[i] = key[i];
		}	
		else{
			switch(keyid[i]){
				case 0xE : PostMessage(CTRL_TASK, WM_KEYUP, 0+(i*4), 0); break;
				case 0xD : PostMessage(CTRL_TASK, WM_KEYUP, 1+(i*4), 0); break;
				case 0xB : PostMessage(CTRL_TASK, WM_KEYUP, 2+(i*4), 0); break;
				case 0x7 : PostMessage(CTRL_TASK, WM_KEYUP, 3+(i*4), 0); break;
				default : break;	
			}
			keyid[i] = 0;
		}
	}
}
