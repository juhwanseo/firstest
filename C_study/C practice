C practice

/////////포인터 연산자 우선순위/////////////////////////////////////////
#include <stdio.h>

#define initpx(i) printf("px == %p\n", px = x + i)
#define printexpr(expr) printf("Operation : "#expr" == %d\n", expr)
#define printpx() printf("After operation : px == %p\n", px)
#define printpx2() printf("                 *px == %d\n\n", *px)
//  *px++    (*px)++    *++px    ++(*px)
int main() {         // [0]  [1]  [2]  [3]  [4]
    static int x[5] = { 100, 200, 300, 400 ,500 };
    int *px;
    
    initpx(0);
    printexpr(*px++);
    printpx();
    printpx2();
    
    initpx(0);
    printexpr((*px)++);
    printpx();
    printpx2();
    
    initpx(3);
    printexpr(*++px);
    printpx();
    printpx2();
    
    initpx(3);
    printexpr(++*px);
    printpx();
    printpx2();
    
    return 0;
}
/////////////////포인터-배열 상관관계///////////////////////////
#include <stdio.h>

int main() {
    int x[5] = {1,2,3,4,5}; 
    int *px;
    px = x;
    
    for(int i=0; i<5; i++, px++){
        printf("px = %p\n", px);
        printf("*px = %d\n", *px);
        printf("x[%d] address = %p\n", i, &x[i]);        
        printf("x[%d] = %d\n\n", i, x[i]);        
    }
    return 0;
}

numArr size = 40
int size = 4
numArr Number of elememts = 10
1 2 3 4 5 6 7 8 9 10 


/////////////////랜덤 숫자 정렬/////////////매개 변수가 배열인 함수의 예
#include <stdio.h>
#include <stdlib.h>

#define MAX 20

void bs(int x[], unsigned n);

int main() {
    int x[MAX];
    int i;
    int random;
    
    for(i=0; i<MAX; i++)
    {
        random = rand()/10000000; // x[0] ~ x[19] ramdom element
        x[i] = random;
    }

    printf("\nGernated array :"); 
    for(i=0; i<MAX; i++) 
        printf("%d ", x[i]);
    
    bs(x, MAX);
    
    printf("\nbubble sort array :"); 
    for(i=0; i<MAX; i++) 
        printf("%d ", x[i]);
    
    return 0;
}

void bs(int x[], unsigned n)
{
    int i, j;
    int temp;
    
    for(i=0; i<n-1; i++) //0~19 loop
    {
        for(j=n-1; j>i; j--) //19~i loop
        {
            if(x[j-1] <= x[j]) continue;
            
            temp = x[j-1];
            x[j-1] = x[j];
            x[j] = temp;
        }
    }
}

Gernated array :180 84 168 171 195 42 71 164 59 118 102 135 78 110 204 196 136 154 30 130 
bubble sort array :30 42 59 71 78 84 102 110 118 130 135 136 154 164 168 171 180 195 196 204 

////////////////////call by value/reference 예시////////////////
#include <stdio.h>

void swap1(int x, int y);
void swap2(int *px, int *py);

int main() {
    int a=10;
    int b=20;

    printf("a = %d b = %d\n", a, b);
    
    swap1(a, b);
    printf("swap1 : a = %d b = %d\n", a, b);
    
    swap2(&a, &b);  //pointer "value's address"!!
    printf("swap2 : a = %d b = %d\n", a, b);

    return 0;
}


void swap1(int x, int y) //call by value
{
    int temp;
    printf("    x = %d y = %d\n", x, y);
    temp = x;
    x = y;
    y = temp;
    printf("    x = %d y = %d\n", x, y);
}

void swap2(int *px, int *py) //call by reference
{
    int temp;
    
    temp = *px;
    *px = *py;
    *py = temp;
}

a = 10 b = 20
    x = 10 y = 20
    x = 20 y = 10
swap1 : a = 10 b = 20
swap2 : a = 20 b = 10


////////////다차원 배열의 이해

#define printpointer(expr) printf("%30s == %p\n", #expr, expr)
#define printsize(expr) printf("%30s == %d\n", #expr, expr)

void main(void)
{
    int i, j, y[3][2];
    i = j = 1;
    y[i][j] = 100;
    
    printpointer(y + i);                //address 
    printsize(sizeof(y + i));           //y[i] size
    printpointer(*(y + i));             //address
    printsize(sizeof(*(y + i)));        //y[i] size = y[i][0] + y[i][1] = 8
    printsize(sizeof(y[i]));            //
    printpointer(*(y + i) + 0);         //address
    printsize(sizeof(*(y + i) + 0));    //
    printpointer(*(y + i) + j);         //address
    printsize(sizeof(*(y + i) + j));    //
    printsize(*(*(y + i) + j));         //value
    printsize(sizeof(*(*(y + i) + j))); //size of int  
    printsize(sizeof(y[i][j]));         //size of int
    
    return 0;
}


////////////////////다차원배열 구성의 이해

#define printarrayname(expr) printf("%15s == %p\n", #expr, expr)
#define printarraysize(expr) printf("%15s == %d\n", #expr, expr)

void main(void)
{
    int z[3][2][2] = {  1, 2, 3, 4, 
                        5, 6, 7, 8, 
                        9, 10, 11, 12
                        };
    
    printarrayname(z);
    printarrayname(z[0]);
    printarrayname(z[1]);
    printarrayname(z[2]);
    printarrayname(z[0][0]);
    printarrayname(z[0][1]);
    printarrayname(z[1][0]);
    printarrayname(z[1][1]);
    printarrayname(z[2][0]);
    printarrayname(z[2][1]);    
    printarraysize(sizeof(z));          //48
    printarraysize(sizeof(z[0]));       //16
    printarraysize(sizeof(z[1]));       //16
    printarraysize(sizeof(z[2]));       //16
    printarraysize(sizeof(z[0][0]));    //8
    printarraysize(sizeof(z[0][1]));    //8
    printarraysize(sizeof(z[1][0]));    //8
    printarraysize(sizeof(z[1][1]));    //8
    printarraysize(sizeof(z[2][0]));    //8
    printarraysize(sizeof(z[2][1]));    //8

    printarraysize(sizeof(z[0][0][0])); //4
}

//////////////다차원 배열의 배열 포인터
#define printexprp(expr) printf(#expr " == %p\n", expr)
#define printexpri(expr) printf(#expr " == %d\n", expr)

void main(void)
{
    int y[][2] = {{100, 200}, {300, 400}, {500, 600}};
    int (*py)[2];
    py = y;
    
    printexprp(y[0]);
    printexprp(py[0]);
    printexprp(y[1]);
    printexprp(py[1]);
    printexprp(y[2]);
    printexprp(py[2]);
    printexpri(sizeof(y[0]));
    printexpri(sizeof(py[0]));
    printexpri(sizeof(y[0][1]));
    printexpri(sizeof(py[0][1]));
    printexpri(y[0][0]);
    printexpri(py[0][0]);
    printexpri(y[2][1]);
    printexpri(py[2][1]);

    return 0;
}

//////////////구조체 정렬

#include <stdio.h>

//#pragma pack(push, 1)
struct PacketHeader {
    char flags;     // 1byte
    int seq;        // 4byte
}__attribute__((aligned(1), packed));
//#pragma pack(pop)

int main()
{
    struct PacketHeader header;

    printf("%d\n", sizeof(header.flags));     // 1: char 1byte
    printf("%d\n", sizeof(header.seq));       // 4: int 4byte
    printf("%d\n", sizeof(header));           // 5: 1byte packed 
                                              // structure size is 5 byte

    return 0;
}

////////////공용체 예제

#include <stdio.h>

union unTemp
{
    char a;
    int b;
    double c;
}un;

int main(void)
{
    printf("sizeof(un.a) =  : %x, %d\n", &un.a, sizeof(un.a));
    printf("sizeof(un.b) =  : %x, %d\n", &un.a, sizeof(un.b));
    printf("sizeof(un.c) =  : %x, %d\n", &un.a, sizeof(un.c));
    printf("sizeof(un.c) =  : %x, %d\n", &un.a, sizeof(un.a));

    un.a = 'A';
    printf("un.a : %c\n", un.a);
    un.b = 10;
    printf("un.b : %d\n", un.b);
    un.c = 14.55;
    printf("un.c : %.2f\n", un.c);
    
    printf("un.a : %c\n", un.a);
    printf("un.b : %d\n", un.b);
    printf("un.c : %.2f\n", un.c);
    return 0;
}

res:
sizeof(un.a) =  : cd67018, 1
sizeof(un.b) =  : cd67018, 4
sizeof(un.c) =  : cd67018, 8
sizeof(un.c) =  : cd67018, 1
un.a : A
un.b : 10
un.c : 14.55
un.a : ?
un.b : -1717986918
un.c : 14.55


////////////////////문자열의 두가지 방법
#include <stdio.h>

void main(void)
{
    static char days[8][4]; //rectangulaer array
    static char *months[13];//ragged array
    int i;

    strcpy(days[1], "SUN"); 
    strcpy(days[2], "MON"); 
    strcpy(days[3], "TUE");
    strcpy(days[4], "WED"); 
    strcpy(days[5], "THU"); 
    strcpy(days[6], "FRI"); 
    strcpy(days[7], "SAT"); 

    months[1] = "January"; 
    months[2] = "February"; 
    months[3] = "March"; 
    months[4] = "April"; 
    months[5] = "May"; 
    months[6] = "June"; 
    months[7] = "July"; 
    months[8] = "August";  
    months[9] = "September"; 
    months[10] = "October"; 
    months[11] = "November"; 
    months[12] = "December"; 

    for (i = 1; i <= 7; i++)
        printf("%s %d %d\n", days[i], sizeof(days[i]), sizeof(days));
    printf("\n");

    for (i = 1; i <= 12; i++)
        printf("%s %d %d\n", months[i], sizeof(months[i]), sizeof(months));
    printf("\n");
}


///////////////포인터 배열을 사용한 문자열 처리

#define MAXMENU 9

void main(void)
{
    char *ps[MAXMENU + 1]; 
    int i, sum;

    ps[1] = " [1] Load"; 
    ps[2] = " [2] Pick"; 
    ps[3] = " [3] New"; 
    ps[4] = " [4] Save"; 
    ps[5] = " [5] Write to"; 
    ps[6] = " [6] Directory"; 
    ps[7] = " [7] Change dir"; 
    ps[8] = " [8] OS shell"; 
    ps[9] = " [9] Quit"; 
    
    for (i = 1; i <= MAXMENU; i++) 
        printf("%s\n", ps[i]); 
    printf("\nSize of pointer array ps: %d bytes.\n\n", sizeof(ps)); // 주소 사이즈 즉 ps의 포인터 크기들의 합

    for (sum = 0, i = 1; i <= MAXMENU; i++)
        sum += strlen(ps[i]) + 1;
    printf("Total real length of all strings: %d bytes.\n\n", sum);
    printf("Total memory allocated: %d + %d = %d bytes\n", sizeof(ps), sum, sizeof(ps)+ sum);

    return 0;
}

/////////////////////////2차원 배열과 지칭
#include<stdio.h>
 
int main(void)
{
    int arr[2][3] = 
    {
        {1, 2, 3}
    ,   {4, 5, 6}
    };
    int(*ptr)[3] = arr;
    
    int Arr[3][2] = 
    {
        {1, 2}
    ,   {3, 4}
    ,   {5, 6}
    };
    int(*Ptr)[2] = arr;
    
    printf("%d \n", Ptr[0][3]);
    printf("%d \n", *(*(Ptr+1))+3);
    printf("%d \n", (*Ptr+2)[2]);   //배열은 결국 번지 연산이므로 번지 값이 더해진 만큼의 위치를 지칭
    
    printf("sizeof(Ptr) = %d\n", sizeof(Ptr));
    printf("sizeof(Arr) = %d\n", sizeof(Arr));
 
    printf("%d \n", ptr[0][0]);
    printf("%d \n", *(*(ptr+1))+1);
    printf("%d \n", (*ptr+0)[2]);
    
    printf("sizeof(ptr) = %d\n", sizeof(ptr));
    printf("sizeof(arr) = %d\n", sizeof(arr));
}

res: 
4 
6 
5 
sizeof(Ptr) = 8
sizeof(Arr) = 24
1 
5 
3 
sizeof(ptr) = 8
sizeof(arr) = 24

///////////rectangular와 ragged 배열

#include <stdio.h>

void main(void)
{

    static char days[][4] = { 
        "", "SUN", "MON", "TUE","WED", "THU", "FRI", "SAT",
        };
    
    static char *months[] = { 
        NULL, 
        "January", "February", "March", 
        "April", "May", "June", "July", 
        "August", "September", "October", 
        "November", "December",
        };

    int i;

    for (i = 1; i <= 7; i++)
        printf("%-4s", days[i]);
    printf("\n %d\n",sizeof(days));
    
    for (i = 1; i <= 12; i++)
        printf("%-10s\n", months[i]);
    printf(" %d",sizeof(months));
    
}

res:
SUN MON TUE WED THU FRI SAT 
 32
January   
February  
March     
April     
May       
June      
July      
August    
September 
October   
November  
December  
104


/////////////함수 포인터///////////
#include <stdio.h>

void abc()          //사용자 함수 정의
{
    printf("abc\n");
}

void main(void)
{
    int (*func)();  //함수 포인터 선언
    func = abc;     //함수 포인터에 사용자 함수 번지 전달
    func();         //함수 포인터에 저장된 번지 호출(abc 호출)
    
    printf("abc()의 주소 = %p\n", &abc);
    printf("func()의 주소 = %p\n", &func);
    printf("func()의 값 = %p\n", *func);
    
}

res:
abc
abc()의 주소 = 0x5561c8cb5220
func()의 주소 = 0x7ffc609eed50
func()의 값 = 0x5561c8cb5220



///////////////함수 포인터 활용

#include <stdio.h>

int add(int a, int b)
{
    return a + b;
}

int sub(int a, int b)
{
    return a - b;
}

int mul(int a, int b)
{
    return a * b;
}

int div(int a, int b)
{
    return a / b;
}

int main()
{
    int funcNumber;    // 함수 번호
    int num1, num2;
    int (*fp)(int, int) = NULL;    // int형 반환값, int형 매개변수 두 개가 있는 함수 포인터 선언

    printf("함수 번호와 계산할 값을 입력하세요: ");
    scanf("%d %d %d", &funcNumber, &num1, &num2);    // 함수 번호와 계산할 값을 입력받음

    switch (funcNumber)   // 함수 번호에 따라 함수 포인터 설정
    {
    case 0:               // 0이면
        fp = add;         // 덧셈 함수
        break;
    case 1:               // 1이면
        fp = sub;         // 뺄셈 함수
        break;
    case 2:               // 2이면
        fp = mul;         // 곱셈 함수
        break;
    case 3:               // 3이면
        fp = div;         // 나눗셈 함수
        break;
    }
    
    printf("0 10 20 = 10 add 20 = %d\n", fp(num1, num2));    // 함수 포인터를 사용하여 계산 결과 출력
    printf("function add's address = %p\n", &add);
    printf("function pointer's address = %p\n", &fp);
    printf("function pointer's value(address) =  %p\n", *fp);

    return 0;
}


res : 
함수 번호와 계산할 값을 입력하세요: 0 10 20 = 10 add 20 = 30
function add's address = 0x55fd684802f0
function pointer's address = 0x7ffeb4e10e40
function pointer's value(address) =  0x55fd684802f0

add cmd 0과 10, 20을 주고
30을 반환 받음
함수 포인터는 add의 번지를 저장 했음
add의 번지와 함수 포인터의 대상체(값)가 같음 0x55fd684802f0




////////////linked list stack
#include <stdio.h>
#include <stdlib.h>

struct NODE {
    struct NODE *node;
    int data;
};

struct NODE *Top = NULL;

void push(int input){
    if(Top == NULL){
        struct NODE *newnode = malloc(sizeof(struct NODE));
        newnode->data = input;
        newnode->node = NULL; //first data
        Top = newnode;
    }
    else {
        struct NODE *newnode = malloc(sizeof(struct NODE));
        newnode->data = input;
        newnode->node = Top;
        Top = newnode;
    }
    printf("push : %d\n", input);
}

int pop(void){
        if(Top == NULL){
            printf("empty stack : \n");//empty
            return ;
    }
    else {
        struct NODE *delnode = Top;
        int pop_data = Top->data;
        Top = Top->node;
        free(delnode);
        printf("pop : %d\n", pop_data);
        return pop_data;
    }
    
}

int main() {
    
    pop();
    push(10);
    push(20);
    push(30);
    push(40);
    pop();
    push(50);
    push(60);
    pop();
    pop();
    pop();
    pop();
    pop();
    pop();

    return 0;
}

////////////array circualr queue

#include <stdio.h>
#define size 4

int data[size];
int front; 
int rear;

void enQ(int input){
    if(front == ((rear+1)%size)){ //Queue full
     printf("FULL\n");
    }
    else{ // enqueue sequence
        rear = (rear+1)%size;
        data[rear] = input;
        printf("enQ : %d\n", data[rear]); //dispaly

    }
}

int deQ(void){
    if(front == rear) { //Queue empty
        printf("EMPTY\n");
        return ;
    }
    else{ // dequeue sequence
        int output;
        front = (front+1)%size;
        printf("deQ : %d\n", data[front]); //dispaly
        output = data[front];
        data[front] = NULL;
        return output;
    }
}

void display()
{
        printf("Queue : [0] [1] [2] [3] F: %d R: %d\n", front, rear);
        printf("         %d  %d  %d  %d\n\n", data[0], data[1], data[2], data[3]);
}

int main() {
    display();
    
    enQ(5);
    display();
    
    enQ(10);
    display();
    
    enQ(20);
    display();
    
    deQ();
    display();
    
    deQ();
    display();
    
    enQ(20);
    display();
    
    enQ(20);
    display();
    
    enQ(20);
    display();
    
    deQ();
    display();
    
    deQ();
    display();
    
    deQ();
    display();
    
    deQ();
    display();
return 0;
}




//////////////////

#include <stdio.h>
#define size 4

int data[size];
int front; 
int rear;

void enQ(int input){
    if(front == ((rear+1)%size)){ //Queue full
        printf("FULL  pull front\n");
        //full scenario case 1 : rear input
//      data[rear] = input;

        //full scenario case 2 : pull front 
      front = (front+1)%size;    
      data[front] = NULL;         //not return
      rear = (rear+1)%size;
      data[rear] = input;
      printf("enQ : %d\n", data[rear]); //dispaly

    }
    else{ // enqueue sequence
        rear = (rear+1)%size;
        data[rear] = input;
        printf("enQ : %d\n", data[rear]); //dispaly
    }
}

int deQ(void){
    if(front == rear) { //Queue empty
        printf("EMPTY\n");
        return ;
    }
    else{ // dequeue sequence
        int output;
        front = (front+1)%size;
        printf("deQ : %d\n", data[front]); //dispaly
        output = data[front];
        data[front] = NULL;
        return output;
    }
}

void display()
{
        printf("Queue : [0] [1] [2] [3] F: %d R: %d\n", front, rear);
        printf("         %d  %d  %d  %d\n\n", data[0], data[1], data[2], data[3]);
}

int main() {
    display();
    
    enQ(5);
    display();
    
    enQ(10);
    display();
    
    enQ(20);
    display();
    
    enQ(30);
    display();
    
    enQ(40);
    display();

return 0;
}



/////////////struct
#include <stdio.h>

struct Queue{
    int data[4];
    int f; 
    int r;
}que;

void enQ(int input){
    if(que.f == ((que.r+1)%4)){ //Queue full
        printf("FULL  pull front\n");
        //full scenario case 1 : rear input
//      data[rear] = input;

        //full scenario case 2 : pull front 
      que.f = (que.f+1)%4;    
      que.data[que.f] = NULL;         //not return
      que.r = (que.r+1)%4;
      que.data[que.r] = input;
      printf("enQ : %d\n", que.data[que.r]); //dispaly

    }
    else{ // enqueue sequence
        que.r = (que.r+1)%4;
        que.data[que.r] = input;
        printf("enQ : %d\n", que.data[que.r]); //dispaly
    }
}

int deQ(void){
    if(que.f == que.r) { //Queue empty
        printf("EMPTY\n");
        return ;
    }
    else{ // dequeue sequence
        int output;
        que.f = (que.f+1)%4;
        printf("deQ : %d\n", que.data[que.f]); //dispaly
        output = que.data[que.f];
        que.data[que.f] = NULL;
        return output;
    }
}

void display()
{
        printf("Queue : [0] [1] [2] [3] F: %d R: %d\n", que.f, que.r);
        printf("         %d  %d  %d  %d\n\n", que.data[0], que.data[1], que.data[2], que.data[3]);
}

int main() {
    display();
    
    enQ(5);
    display();
    
    enQ(10);
    display();
    
    enQ(20);
    display();
    
    enQ(30);
    display();
    
    enQ(40);
    display();
    
    deQ();
    display();

    deQ();
    display();
    
    deQ();
    display();

    deQ();
    display();



return 0;
}


/////////array stack

#include <stdio.h>
#define size 4
int data[size];
int top = 0;

void push(int input)
{
    if(top == 4){
        printf("push : Full\t top : %d\n", top);
    }
    else{
        data[top] = input;
        top++;
        printf("push : %d\t top : %d\n", input, top);
    }
}

int pop(void)
{
    if(top == 0){
        printf("pop : Empty\t top : %d\n", top);
        return ;
    }
    else{
        int output;
        output = data[top-1];
        data[top-1] = 0;
        top--;
        printf("pop : %d\t top : %d\n", output, top);
        return output;
    }
}

void display()
{
    printf("Stack : [0][1][2][3]\n");
    printf("         %d  %d  %d  %d\n\n", data[0], data[1], data[2], data[3]);
}

int main() {
    display();
    
    pop();
    display();

    push(3);
    display();

    push(6);
    display();
    
    pop();
    display();
    
    pop();
    display();

    pop();
    display();

    push(1);
    display();
    
    push(2);
    display();

    push(3);
    display();

    push(4);
    display();
    
    push(5);
    display();

    return 0;
}


//////////////recursive

#include <stdio.h>

void func(int i)
{
    if(i == 0) return; //탈출 조건
    
    printf("call\n");
    
    func(--i);         //탈출 루프
}

int main()
{
    func(3);
    
   return 0; 
}